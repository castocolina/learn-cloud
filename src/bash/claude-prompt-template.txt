Act as an expert front-end developer, specializing in pure HTML, modern CSS (Grid, Flexbox), and JavaScript (ES6), without frameworks. Your mission is to elevate the quality and functionality of an educational book web application.

**IMPORTANT NOTICE - RECENT CODEBASE CHANGES:**
The application's CSS and JavaScript files in `src/book/` have been recently updated and optimized. These files contain carefully crafted responsive designs, z-index hierarchies, mobile navigation fixes, and performance optimizations. Please exercise extreme caution when modifying these files:

- **CSS (`src/book/style.css`):** Contains recent fixes for mobile navigation, sticky headers, progress bars, and responsive layouts. Only modify if absolutely critical for the unit-specific requirements.
- **JavaScript (`src/book/*.js`):** Core functionality has been recently stabilized. Avoid changes unless there are clear functional errors preventing the unit from working.
- **Preference:** Focus primarily on HTML content improvements and only touch CSS/JS when there are clear, documented bugs or missing functionality that prevents the unit from functioning properly.

**SCRIPT ORGANIZATION:**
If you need to create any utility scripts during your work, please place them in the appropriate directories:
- **Python scripts:** Place in `src/python/` directory
- **Bash/Shell scripts:** Place in `src/bash/` directory

These directories are already established for maintaining organized tooling and automation scripts separate from the main application code.

You will meticulously review and solve several critical UI/UX and functionality problems in this application, focusing on **Unit X (src/book/unitX)**. You have the flexibility to adjust related styles and JavaScript files in the `src/book/` directory as needed, but prioritize HTML-only solutions when possible.

Below are the detailed problems and the precise requirements to solve them:

**1. Mermaid Diagram Orientation:**
   - **Requirement:** All Mermaid diagrams containing more than five nodes must be refactored to use a Left-to-Right (`LR`) orientation. This improves readability and consistency.
   - **Action:** Scan all `*.html` files within the target unit, identify `div.mermaid` blocks, and if the node count exceeds five, ensure the diagram definition starts with `graph LR;`.

**2. Standardized Page Titles and Introductions:**
   - **Requirement:** Every `quiz`, `study_aids`, and `exam` page must have a descriptive `<h1>` title and a brief introductory paragraph. The title must follow the numeric `Unit-Topic: Type - Concept` format. This is a new global rule.
   - **Action:**
     - For each `X-Y_quiz.html`, `X-Y_study_aids.html`, and `X-Y_unit_X_final_exam.html` file, add an `<h1>` tag with the corresponding title (e.g., `<h1>X-Y: Quiz - Overview & Foundational Concepts</h1>`, `<h1>X-Y: Study Aids - Code Quality and Standards</h1>`).
     - Below the title, add a concise `<p>` tag that introduces the content of the page.

**3. Centralized Modal (`<dialog>`) Consolidation:**
   - **Requirement:** Eliminate all local `<dialog>` elements from topic pages, quizzes, and study aids. The application uses a single, global modal in `index.html` for displaying content like flashcards, diagrams, and code examples.
   - **Action:**
     - Identify and remove any `<dialog>` markup found within the unit's `*.html` files.
     - Ensure that elements meant to be displayed in a modal (e.g., flashcards, code blocks) have the correct CSS classes to trigger the global modal functionality. You will need to investigate the existing JavaScript (`src/book/*.js`) and HTML structure to determine the correct classes to apply. For example, a flashcard might need a class like `flashcard` and a specific data attribute to work correctly with the global modal script.

**4. Flashcard Expand Button & Structural Coherence:**
   - **Requirement:** All flashcards must feature an expand button in the top-right corner to trigger the modal view. Additionally, the overall HTML structure of each topic, quiz, and study aid must be consistent with the patterns established in other units.
   - **Action:**
     - Verify that every `.flashcard` element contains the correct markup for the expand button. If missing, add it.
     - Review the general structure of the page against other units to ensure consistency in layout, class naming, and component usage.

**5. Unit Final Exam Functionality Review:**
   - **Requirement:** The unit final exam must be fully functional. Unit 1's exam is currently broken and similar issues may exist in other units.
   - **Action:**
     - Thoroughly test the `X-X_unit_X_final_exam.html` file to ensure all JavaScript functionality works correctly.
     - Verify that questions display properly, navigation works, scoring functions correctly, and the exam can be completed successfully.
     - Fix any broken JavaScript, missing event handlers, or structural issues that prevent the exam from functioning.

**6. Mobile-Responsive Navigation Buttons:**
   - **Requirement:** Previous/Next navigation buttons in quizzes and exams are causing horizontal scroll on mobile devices due to their large size.
   - **Action:**
     - Reduce the size of Previous/Next navigation buttons in all quiz and exam pages.
     - Ensure buttons fit properly within mobile viewport widths (320px minimum).
     - Test that the buttons remain accessible and usable while being smaller.
     - Apply consistent button sizing across all quiz and exam pages in the unit.

**7. Unit Overview Links Validation:**
   - **Requirement:** The unit overview page (`unitX_overview.html`) has broken or incorrect navigation links. Users click on quiz links but are redirected to study aids pages, and vice versa.
   - **Action:**
     - Thoroughly review all navigation links in the `unitX_overview.html` file.
     - Verify that each link points to the correct corresponding file:
       * Quiz links should point to `X-Y_quiz.html` files
       * Study aids links should point to `X-Y_study_aids.html` files
       * Topic links should point to `X-Y_topic_name.html` files
       * Final exam links should point to `X-X_unit_X_final_exam.html`
     - Test each link manually to ensure proper navigation.
     - Fix any incorrect href attributes that cause misdirection.


---

**Final Instructions:**

While the primary focus is on **Unit X**, you are encouraged to review other units (`src/book/unit*`) to identify patterns and establish best practices for a consistent user experience across the entire application. If you discover a new, improved pattern or rule for the application's functionality or design, you are authorized to update the `CLAUDE.md` file to formalize this change for future development.

Upon completion of each task, you must validate the integrity of the modified HTML, CSS, JavaScript, and Mermaid diagrams to ensure no regressions have been introduced.
